name: Django CI/CD

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort  # Добавлены black и isort для форматирования

      - name: Run flake8
        run: flake8 .

      - name: Check formatting with black
        run: black --check .  # Проверка форматирования без изменений

      - name: Sort imports with isort
        run: isort --check-only .  # Проверка сортировки импортов

  test:
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev  # Для работы с PostgreSQL

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov  # Для покрытия тестами

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h postgres -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i"
            sleep 2
          done

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/test_db
          DJANGO_SETTINGS_MODULE: config.settings_test  # Рекомендуется отдельные настройки для тестов
        run: |
          python -m pytest --cov=. --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Более эффективная сборка образов

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'  # Только для main ветки
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/drf-app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'  # Развертывание только из main ветки
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Install rsync
        run: sudo apt-get install -y rsync

      - name: Copy files to server
        run: |
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='venv/' \
            --exclude='.env' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Create .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          cat > ${{ secrets.DEPLOY_DIR }}/.env << 'EOL'
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ secrets.DEBUG }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          EOL
          EOF

      - name: Setup Python on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip postgresql-client libpq-dev
          EOF

      - name: Install dependencies
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          python3 -m venv venv --clear
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          EOF

      - name: Run migrations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py migrate --noinput
          EOF

      - name: Collect static files
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py collectstatic --noinput
          EOF

      - name: Restart services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo systemctl restart myapp.service
          sudo systemctl restart celery.service  # Если используется Celery
          sudo systemctl restart celery-beat.service  # Если используется Celery Beat
          EOF